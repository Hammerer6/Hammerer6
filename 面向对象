类class
用来描述具有相同属性和方法（定义的函数）的对象的集合，对象时类的实例。

类变量
类变量在实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不做实例变量使用。

方法重写：
如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。

实例变量：
在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。

继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
实例化：创建一个类的实例，类的具体对象。
对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。


示例
class myclass:
  i=123   #类的属性
  def f(self):#类的方法
  print(123)
x=myclass() #实例化类
#通过实例，访问类的属性和方法
print(x.i) 
print(x.f())



类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self


__init__初始化方法(__init__是py的一种构造方法)
class exmple:
      def __init__(self):
        self.somevar=66
f=exmple()
print(f.somevar)
如果此处不使用__init__方法，那么实例化就不能调用somevar的值




Python 面向对象中的 __init__ 方法怎么理解？构造方法中的初始值无法继承的问题。
https://www.runoob.com/note/42127


继承
子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。
BaseClassName（实例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用: 

示例
class people:
  name=""  #定义属性
  age=0
  __weight=0  #定义私有属性，私有属性在类的外部无法直接访问
  def __init__(self,n,a,w)
    self.name=n
    self.age=a
    self.__weight=w
  def speak(self):
    print("%s 说: 我 %d 岁。" %(self.name,self.age))
 
 单继承示例
 class student(people):
  grade=""
  def__init__(self,n,a,w,g):
  people.__init__(self,n,a,w)#调用父类的构函
  self.grade=g
   #”覆写“父类的方法
   def speak(self):
        print("%s 说: 我 %d 岁了，我在读 %d 年级"%(self.name,self.age,self.grade))
s = student('ken',10,60,3)
s.speak()

多继承
写两或多个类class student(people)
        class speaker()
然后在一个类中完成继承class sample(speaker,student)




方法重写
如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法
class parent：
  def mymethod(self):
    print("父类方法")
class child(parent):
  def mymethod(self):
    print("子类方法")
c=child()
c.mymethod()#子类调用重写方法
super(child,c).mymethod()#用子类对象调用“父类已经被覆盖的方法"    super() 函数是用于调用父类(超类)的一个方法。
输出结果为
调用子类方法
调用父类方法










